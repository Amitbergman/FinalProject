/*
 * main.c
 *
 *  Created on: May 5, 2018
 *      Author: User
 */
#include <stdio.h>

#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "main_aux.h"
#include "game.h"
#include "parser.h"
#include "solver.h"
#include "SPBufferset.h"
#include <stdlib.h>
#include <stdio.h>


/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
typedef struct SudokuCell
{
  int content;
  int isFixed;
  int isError;
} SudokuCell;

typedef struct SudokuBoard
{
  int n;
  int m;
  SudokuCell **board;
} SudokuBoard;

void
printSeperatorRow (int n, int N)
{
  /*Prints the delimeter between rows */
  int i = 0;
  for (; i < 4 * N + n + 1; i++)
    {
      printf ("-");
    }
  printf ("\n");
}

void
printCell (SudokuCell cellToPrint, int isInEditModeOrMarkSetToOne)
{
  printf (" ");
  if (cellToPrint.content > 0)
    {
      printf ("%d", cellToPrint.content);
    }
  else
    {
      printf ("  ");
    }
  if (cellToPrint.isFixed == 1)
    {
      printf (".");
    }
  else
    {
      if (cellToPrint.isError == 1 && isInEditModeOrMarkSetToOne == 1)
	{
	  printf ("*");
	}
      else
	{
	  printf (" ");
	}
    }



}

void printRealRow (SudokuBoard * boardPointer, int rowToPrint)
{

  SudokuBoard sudboard = *boardPointer;
  int i = 0;
  int n = sudboard.n;
  int m = sudboard.m;
  int N = n * m;
  int column = 0;
  for (; i < N + m + 1; i++)
    {
      if (i % (n + 1) == 0)
	{
	  printf ("|");
	}
      else
	{
	  printCell (sudboard.board[rowToPrint][column], 0);
	  column ++;

	}
    }

}

void printer (SudokuBoard * boardPointer)
{

  SudokuBoard board = *boardPointer;
  int n = board.n;
  int m = board.m;
  int N = n * m;

  int row = 0, i = 0;
  for (; i < N + n + 1; i++)
    {

      if (i % (m + 1) == 0)
	printSeperatorRow (n, N);

      else
	{
	  printRealRow (&board, row);
	  row++;

	}
    printf ("\n");


    }

}


int main ()
{
  SudokuBoard *boardPointer =
    (SudokuBoard *) calloc (1, sizeof (SudokuBoard));

  (*(boardPointer)).n = 2;
  (*(boardPointer)).m = 5;

  SudokuCell **a = (SudokuCell **) calloc (10, sizeof (SudokuCell *));

  for (int i = 0; i < 10; i++)
    {
      a[i] = (SudokuCell *) calloc (10, sizeof (SudokuCell));
      for (int j = 0; j < 10; j++)
	{
	  SudokuCell *b = (SudokuCell *) calloc (1, sizeof (SudokuCell));
	  SudokuCell cell = *b;
	  cell.content = 7;
	  cell.isError = 0;
	  cell.isFixed = 0;

	  a[i][j] = cell;

	}
    }
  (*boardPointer).board = a;
  printer (boardPointer);


  return 0;
}


